/*
 * Swagger Dead Code Analizer YAML
 * This is a simple service to submit you java project to analyse dead code using SciTool.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: lahiru.karunatilake@aurea.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import com.google.gson.annotations.SerializedName;

import io.swagger.annotations.ApiModelProperty;

/**
 * Repository
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-04-06T07:41:02.971Z")
public class Repository {
  @SerializedName("id")
  private String id = null;

  @SerializedName("deadCode")
  private List<DeadCode> deadCode = new ArrayList<DeadCode>();

  @SerializedName("url")
  private String url = null;

  /**
   * Repository status
   */
  public enum StatusEnum {
    @SerializedName("preparing")
    PREPARING("preparing"),
    
    @SerializedName("pending")
    PENDING("pending"),
    
    @SerializedName("analysing")
    ANALYSING("analysing"),

    @SerializedName("completed")
    COMPLETED("completed"),
    
    @SerializedName("failed")
    FAILED("failed");
    
    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("status")
  private StatusEnum status = null;

  public Repository id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(example = "null", value = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Repository deadCode(List<DeadCode> deadCode) {
    this.deadCode = deadCode;
    return this;
  }

  public Repository addDeadCodeItem(DeadCode deadCodeItem) {
    this.deadCode.add(deadCodeItem);
    return this;
  }

   /**
   * Get deadCode
   * @return deadCode
  **/
  @ApiModelProperty(example = "null", value = "")
  public List<DeadCode> getDeadCode() {
    return deadCode;
  }

  public void setDeadCode(List<DeadCode> deadCode) {
    this.deadCode = deadCode;
  }

  public Repository url(String url) {
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @ApiModelProperty(example = "https://github.com/owner/project.git", required = true, value = "")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }

  public Repository status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Repository status
   * @return status
  **/
  @ApiModelProperty(example = "null", value = "Repository status")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Repository repository = (Repository) o;
    return Objects.equals(this.id, repository.id) &&
        Objects.equals(this.deadCode, repository.deadCode) &&
        Objects.equals(this.url, repository.url) &&
        Objects.equals(this.status, repository.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, deadCode, url, status);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Repository {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    deadCode: ").append(toIndentedString(deadCode)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

