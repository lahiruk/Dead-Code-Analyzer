/*
 * Swagger Dead Code Analizer YAML
 * This is a simple service to submit you java project to analyse dead code using SciTool.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: lahiru.karunatilake@aurea.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.Function;
import io.swagger.client.model.GlobalVariable;
import java.util.ArrayList;
import java.util.List;

/**
 * DeadCode
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-04-07T07:50:26.541Z")
public class DeadCode {
  @SerializedName("id")
  private Long id = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("globalVariables")
  private List<GlobalVariable> globalVariables = new ArrayList<GlobalVariable>();

  @SerializedName("functions")
  private List<Function> functions = new ArrayList<Function>();

  public DeadCode id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(example = "null", value = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public DeadCode name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(example = "null", value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public DeadCode globalVariables(List<GlobalVariable> globalVariables) {
    this.globalVariables = globalVariables;
    return this;
  }

  public DeadCode addGlobalVariablesItem(GlobalVariable globalVariablesItem) {
    this.globalVariables.add(globalVariablesItem);
    return this;
  }

   /**
   * Get globalVariables
   * @return globalVariables
  **/
  @ApiModelProperty(example = "null", value = "")
  public List<GlobalVariable> getGlobalVariables() {
    return globalVariables;
  }

  public void setGlobalVariables(List<GlobalVariable> globalVariables) {
    this.globalVariables = globalVariables;
  }

  public DeadCode functions(List<Function> functions) {
    this.functions = functions;
    return this;
  }

  public DeadCode addFunctionsItem(Function functionsItem) {
    this.functions.add(functionsItem);
    return this;
  }

   /**
   * Get functions
   * @return functions
  **/
  @ApiModelProperty(example = "null", value = "")
  public List<Function> getFunctions() {
    return functions;
  }

  public void setFunctions(List<Function> functions) {
    this.functions = functions;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeadCode deadCode = (DeadCode) o;
    return Objects.equals(this.id, deadCode.id) &&
        Objects.equals(this.name, deadCode.name) &&
        Objects.equals(this.globalVariables, deadCode.globalVariables) &&
        Objects.equals(this.functions, deadCode.functions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, globalVariables, functions);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeadCode {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    globalVariables: ").append(toIndentedString(globalVariables)).append("\n");
    sb.append("    functions: ").append(toIndentedString(functions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

